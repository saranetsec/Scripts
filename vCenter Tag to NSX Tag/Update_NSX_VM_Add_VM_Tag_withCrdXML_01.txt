# Import PowerCLI module 

Import-Module VMware.VimAutomation.Core


# Disable Proxy 

Set-PowerCLIConfiguration -ProxyPolicy NoProxy -confirm:$false

#To accept all TLS versions, if getting SSL/TLS version mismatch error

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls,[Net.SecurityProtocolType]::Tls11,[Net.SecurityProtocolType]::Tls12

# Disable SSL_TSL Certificate Check
. "C:\path\to\file\Disable_SSL_TLS.ps1"

# Ignore InvalidCertificate 

Set-PowerCLIConfiguration -DisplayDeprecationWarnings $false -InvalidCertificateAction ignore -confirm:$false

#Background Color
function Green
{
process { Write-Host $_ -ForegroundColor Green }
}


function Red
{
process { Write-Host $_ -ForegroundColor Red }
}


#Setting up Credential XML file

$xmlfilepathnsx = "C:\path\to\file\\nsx-cred.xml" #Update file reference folder

if (Test-Path -Path $xmlfilepathnsx) {
 Write-Host "The Credential XML file exists"
$nsxcred = Import-Clixml $xmlfilepathnsx 
}
else {
Write-Host "The Credential XML file doesn't exists"
$nsxcred = Get-Credential
$nsxcred| Export-Clixml $xmlfilepathnsx
}

# NSX-T Manager API details 
$nsxServer = "https://172.20.10.41" #Update NSX Manager IP address


#$skipcertcheck = $true


# Encode credentials for Basic Auth 

$encodedAuth =  [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $nsxcred.UserName, $nsxcred.GetNetworkCredential().Password))) 
#$header = @{Authorization = "Basic" + $encodedAuth
#"Content-Type" = "application/json"
#}
$header = @{Authorization = "Basic $encodedAuth"
 "Content-Type" = "application/json"
}


#Array to hold VM External ID
$vmexternalid =@()
$vmexternalidobj = @()
$nsxvmtag =@()
$nsxvmtagobj = @()
$vmtags =@()
$vmtagsobj = @()
# Load the CSV file 
$vmlist = Import-Csv -Path "C:\path\to\file\vCener_TagAssignment.csv" #Update file reference folder

foreach ($vm in $vmlist) {
$vmname = $vm.VMName
$tagValue = $vm.TagName
$uri = "$nsxServer/policy/api/v1/fabric/virtual-machines?display_name=$vmname" 

try {
$response = Invoke-RestMethod -Uri $uri -Method Get -Headers $header

$response.Results.Count

} catch { 

 throw $_
        }


$objectType ="VirtualMachine"
#$scope = ""

$vmexternalidobj = [PSCustomObject]@{

VMName= $vm.VMName

TagName= $vm.TagName

External_ID= $response.results.external_id

} 

$vmexternalid += $vmexternalidobj

# Define API endpoint and tag structure for the POST request 

$vmtaguri = "$nsxServer/policy/api/v1/fabric/virtual-machines?action=add_tags" 

$body = @{ 

external_id = $response.results.external_id
tags = @( 

@{ 

scope = $vm.Category

tag = $vm.TagName

} 

) 

} | ConvertTo-Json -Depth 5

try { 

$tagresponse = Invoke-RestMethod -Uri $vmtaguri -Method Post -Body $body -ContentType "application/json" -Headers $header

            Write-Output "Tag '$tagValue' applied to '$vmname' under scope $scope." | Green


                } catch { 
                        $streamReader1 = [System.IO.StreamReader]::new($_.Exception.Response.GetResponseStream())

                                $ErrResp1 = $streamReader1.ReadToEnd() | ConvertFrom-Json
                    Write-Output "Failed to apply tag '$tagValue' to '$vmname' under scope $scope"| Red  } 
}

$vmlistonly = Import-Csv -Path "C:\path\to\file\vCener_TagAssignment.csv" | Select-Object -ExpandProperty VMName -Unique #Update file reference folder
#$vmlistonly
foreach ($vmonly in $vmlistonly) {
$vmnameonly = $vmonly
#$vmnameonly
$nsxvmtaguri = "$nsxServer/policy/api/v1/fabric/virtual-machines?display_name=$vmnameonly"
#$nsxvmtaguri
$nsxtagresponse = Invoke-RestMethod -Uri $nsxvmtaguri -Method Get -ContentType "application/json" -Headers $header
#$nsxtagresponse.results
$nsxvmtagobj = [PSCustomObject]@{

VMName= $nsxtagresponse.results.display_name
TagName= $nsxtagresponse.results.tags.tag
}
#$nsxvmtagobj
$nsxvmtag += $nsxvmtagobj 
#$nsxvmtag
}

$ErrResp1
$vmexternalid | Export-Csv "NSX_Inventory_VM_ObjID_Artefact.csv" -Encoding utf8 -NoTypeInformation
$nsxvmtag | ConvertTo-Json | out-file "NSX_Post_Tag_Update_Artefact.json"
#$nsxvmtag
$nsxvmtag | Select-Object VMName, @{n="TagName"; e={$_.TagName -join ','}} | Export-Csv "NSX_Post_Tag_Update_Artefact.csv" -Encoding utf8 -NoTypeInformation

