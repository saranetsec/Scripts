# Import PowerCLI module 

Import-Module VMware.VimAutomation.Core


# Disable Proxy 

Set-PowerCLIConfiguration -ProxyPolicy NoProxy -confirm:$false


#To accept all TLS versions, if getting SSL/TLS version mismatch error

[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls,[Net.SecurityProtocolType]::Tls11,[Net.SecurityProtocolType]::Tls12

# Ignore InvalidCertificate 

Set-PowerCLIConfiguration -DisplayDeprecationWarnings $false -InvalidCertificateAction ignore -confirm:$false

#Setting up Credential XML file

$xmlfilepath = "C:\path\to\file\vcenter-cred.xml" #Update file path

if (Test-Path -Path $xmlfilepath) {
 Write-Host "The Credential XML file exists"
$cred = Import-Clixml -Path "C:\path\to\file\vcenter-cred.xml" #Update file path
}
else {
Write-Host "The Credential XML file doesn't exists"
$cred = Get-Credential
$cred| Export-Clixml -Path "C:\path\to\file\vcenter-cred.xml" #Update file path
}


# Define vCenter connection variables 

$vCenterServer = "172.20.10.94" #vCenter Server IP address


# Connect to vCenter 

Connect-VIServer -Server $vCenterServer -Credential $cred

# Get all tags 

#$tags = Get-Tag 


# Initialize an array to hold tag assignments

$tagAssignment = @()
$tagAssignmentobject = @()


# Get all VMs 

$vms = Get-VM 


# Retrieve tag assignments for each VM 

foreach ($vm in $vms) { 

$vmTags = Get-TagAssignment -Entity $vm 

foreach ($tag in $vmTags) { 

#Create a custom object for each tag assignments

$tagAssignmentobject = [PSCustomObject]@{

VMName= $vm.Name

TagName= $tag.Tag.Name

Category= $tag.Tag.Category

} 

$tagAssignment += $tagAssignmentobject

} 

}

# Export VM Tag details into CSV file

$tagAssignment | Export-Csv "C:\path\to\file\vCener_TagAssignment.csv" -Encoding utf8 -NoTypeInformation #Update file path

# Disconnect from vCenter 

Disconnect-VIServer -Server $vCenterServer -Confirm:$false